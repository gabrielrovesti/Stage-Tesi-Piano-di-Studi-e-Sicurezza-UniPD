{"id":"6b9dc082bd01acdd79e6ab99a342a71d","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/Raffle.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n\r\nerror Raffle__NotEnoughETHEntered();\r\nerror Raffle__TransferFailed();\r\nerror Raffle__SendMoreToEnterRaffle();\r\nerror Raffle__RaffleNotOpen();\r\n\r\n// Raffle\r\n// Enter the lottery by sending ETH to the contract address.\r\n// Pick a random winner (verifiably random)\r\n// Winner to be selected every X minutes\r\n// Chainlink Oracle --> Randomness and Automated execution\r\n\r\ncontract Raffle is VRFConsumerBaseV2 {\r\n\r\n    // State variables\r\n    uint256 private immutable i_entranceFee;\r\n    address payable[] private s_players;\r\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\r\n    bytes32 private immutable i_gaslane;\r\n    uint64 private immutable i_subscriptionId;\r\n    uint32 private immutable i_callbackGasLimit;\r\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\r\n    uint16 private constant NUM_WORDS = 1;\r\n\r\n    //Lottery variables\r\n    address private s_recentWinner;\r\n\r\n    //Events\r\n    event RaffleEnter(address indexed player);\r\n    event RequestedRaffleWinner(uint256 indexed requestId);\r\n    event WinnerPicker(address indexed winner);\r\n\r\n    constructor(\r\n        address vrfCoordinatorV2, \r\n        uint256 entranceFee, \r\n        bytes32 gasLane,\r\n        uint64 subscriptionId,\r\n        uint32 callbackGasLimit\r\n        ) \r\n        VRFConsumerBaseV2(vrfCoordinatorV2){\r\n        i_entranceFee = entranceFee;\r\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n        i_gaslane = gasLane;\r\n        i_subscriptionId = subscriptionId;\r\n        i_callbackGasLimit = callbackGasLimit;\r\n    }\r\n    \r\n    function enterRaffle() public payable{\r\n        // require(msg.value > i_entranceFee, \"Incorrect amount of ETH sent\");\r\n        if(msg.value < i_entranceFee) {\r\n            revert Raffle__NotEnoughETHEntered();\r\n        }\r\n        s_players.push(payable(msg.sender));\r\n        // Emit and event when we update the state\r\n        emit RaffleEnter(msg.sender);\r\n    }\r\n\r\n    function requestRandomWinner() external {\r\n        //Request the random number; once we get it, do something with it\r\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\r\n            i_gaslane,\r\n            i_subscriptionId,\r\n            REQUEST_CONFIRMATIONS,\r\n            i_callbackGasLimit,\r\n            NUM_WORDS\r\n        );\r\n        emit RequestedRaffleWinner(requestId);\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\r\n        uint256 winnerIndex = randomWords[0] % s_players.length;\r\n        address payable recentWinner = s_players[winnerIndex];\r\n        s_recentWinner = recentWinner;\r\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\r\n        if(!success) {\r\n            revert Raffle__TransferFailed();\r\n        }\r\n        emit WinnerPicker(recentWinner);\r\n    }\r\n\r\n    // Getters\r\n\r\n    function getEntranceFee() public view returns (uint256) {\r\n        return i_entranceFee;\r\n    }\r\n\r\n    function getPlayer(uint256 index) public view returns (address payable) {\r\n        return s_players[index];\r\n    }\r\n\r\n    function getRecentWinner() public view returns (address) {\r\n        return s_recentWinner;\r\n    }\r\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Raffle.sol:75:33:\n   |\n75 |     function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n   |                                 ^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2664,"file":"contracts/Raffle.sol","start":2647},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[76]},"id":77,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":76,"linearizedBaseContracts":[76],"name":"AutomationCompatibleInterface","nameLocation":"67:29:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"101:985:1","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:1","nodeType":"VariableDeclaration","scope":69,"src":"1110:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:1"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:1","nodeType":"VariableDeclaration","scope":69,"src":"1154:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":64,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"performData","nameLocation":"1186:11:1","nodeType":"VariableDeclaration","scope":69,"src":"1173:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":66,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:1"},"scope":76,"src":"1089:110:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1203:1003:1","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":75,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:1","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"performData","nameLocation":"2247:11:1","nodeType":"VariableDeclaration","scope":75,"src":"2232:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":71,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:1"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2268:0:1"},"scope":76,"src":"2209:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":77,"src":"57:2214:1","usedErrors":[]}],"src":"32:2240:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[172]},"id":173,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":78,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":172,"linearizedBaseContracts":[172],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"97:267:2","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":89,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:2","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"392:2:2"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"437:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":81,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"451:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":83,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"465:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":85,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":86,"nodeType":"ArrayTypeName","src":"465:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:2"},"scope":172,"src":"367:121:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"492:1511:2","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":105,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:2","nodeType":"FunctionDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:2","nodeType":"VariableDeclaration","scope":105,"src":"2039:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":91,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"subId","nameLocation":"2067:5:2","nodeType":"VariableDeclaration","scope":105,"src":"2060:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":93,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:2","nodeType":"VariableDeclaration","scope":105,"src":"2078:34:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":95,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:2","nodeType":"VariableDeclaration","scope":105,"src":"2118:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":97,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:2","nodeType":"VariableDeclaration","scope":105,"src":"2147:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":99,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:2"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:2","nodeType":"VariableDeclaration","scope":105,"src":"2185:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:2"},"scope":172,"src":"2006:198:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2208:384:2","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":111,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:2","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"2622:2:2"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"subId","nameLocation":"2650:5:2","nodeType":"VariableDeclaration","scope":111,"src":"2643:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":108,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:2"},"scope":172,"src":"2595:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"2661:381:2","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:2","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"subId","nameLocation":"3077:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3070:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":113,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:2"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"balance","nameLocation":"3133:7:2","nodeType":"VariableDeclaration","scope":126,"src":"3126:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":116,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":119,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:2","nodeType":"VariableDeclaration","scope":126,"src":"3148:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":118,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":121,"mutability":"mutable","name":"owner","nameLocation":"3179:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3171:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:2","nodeType":"VariableDeclaration","scope":126,"src":"3192:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":123,"nodeType":"ArrayTypeName","src":"3192:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:2"},"scope":172,"src":"3045:180:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"3229:164:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":134,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:2","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"subId","nameLocation":"3445:5:2","nodeType":"VariableDeclaration","scope":134,"src":"3438:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":128,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:2","nodeType":"VariableDeclaration","scope":134,"src":"3452:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:2"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"3478:0:2"},"scope":172,"src":"3396:83:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"3483:212:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:2","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"subId","nameLocation":"3746:5:2","nodeType":"VariableDeclaration","scope":140,"src":"3739:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":136,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:2"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"3761:0:2"},"scope":172,"src":"3698:64:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"3766:170:2","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":148,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:2","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"subId","nameLocation":"3967:5:2","nodeType":"VariableDeclaration","scope":148,"src":"3960:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":142,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:2","nodeType":"VariableDeclaration","scope":148,"src":"3974:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":144,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:2"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"4000:0:2"},"scope":172,"src":"3939:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"4005:172:2","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":156,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:2","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"subId","nameLocation":"4211:5:2","nodeType":"VariableDeclaration","scope":156,"src":"4204:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":150,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:2","nodeType":"VariableDeclaration","scope":156,"src":"4218:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"4244:0:2"},"scope":172,"src":"4180:65:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"4249:140:2","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":164,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:2","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"subId","nameLocation":"4427:5:2","nodeType":"VariableDeclaration","scope":164,"src":"4420:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":158,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"to","nameLocation":"4442:2:2","nodeType":"VariableDeclaration","scope":164,"src":"4434:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:2"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"4454:0:2"},"scope":172,"src":"4392:63:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":171,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:2","nodeType":"FunctionDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"subId","nameLocation":"4788:5:2","nodeType":"VariableDeclaration","scope":171,"src":"4781:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":165,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:2"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":171,"src":"4818:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":168,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:2"},"scope":172,"src":"4751:73:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":173,"src":"57:4769:2","usedErrors":[]}],"src":"32:4795:2"},"id":2},"contracts/Raffle.sol":{"ast":{"absolutePath":"contracts/Raffle.sol","exportedSymbols":{"AutomationCompatibleInterface":[76],"Raffle":[389],"Raffle__NotEnoughETHEntered":[179],"Raffle__RaffleNotOpen":[185],"Raffle__SendMoreToEnterRaffle":[183],"Raffle__TransferFailed":[181],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[172]},"id":390,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":174,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":390,"sourceUnit":58,"src":"57:61:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","id":176,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":390,"sourceUnit":77,"src":"120:84:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":177,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":390,"sourceUnit":173,"src":"206:80:3","symbolAliases":[],"unitAlias":""},{"id":179,"name":"Raffle__NotEnoughETHEntered","nameLocation":"296:27:3","nodeType":"ErrorDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[],"src":"323:2:3"},"src":"290:36:3"},{"id":181,"name":"Raffle__TransferFailed","nameLocation":"334:22:3","nodeType":"ErrorDefinition","parameters":{"id":180,"nodeType":"ParameterList","parameters":[],"src":"356:2:3"},"src":"328:31:3"},{"id":183,"name":"Raffle__SendMoreToEnterRaffle","nameLocation":"367:29:3","nodeType":"ErrorDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"396:2:3"},"src":"361:38:3"},{"id":185,"name":"Raffle__RaffleNotOpen","nameLocation":"407:21:3","nodeType":"ErrorDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[],"src":"428:2:3"},"src":"401:30:3"},{"abstract":false,"baseContracts":[{"baseName":{"id":186,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"676:17:3"},"id":187,"nodeType":"InheritanceSpecifier","src":"676:17:3"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":389,"linearizedBaseContracts":[389,57],"name":"Raffle","nameLocation":"666:6:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":189,"mutability":"immutable","name":"i_entranceFee","nameLocation":"753:13:3","nodeType":"VariableDeclaration","scope":389,"src":"727:39:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"727:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":192,"mutability":"mutable","name":"s_players","nameLocation":"799:9:3","nodeType":"VariableDeclaration","scope":389,"src":"773:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"773:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":191,"nodeType":"ArrayTypeName","src":"773:17:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":195,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"859:16:3","nodeType":"VariableDeclaration","scope":389,"src":"815:60:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":194,"nodeType":"UserDefinedTypeName","pathNode":{"id":193,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":172,"src":"815:25:3"},"referencedDeclaration":172,"src":"815:25:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":197,"mutability":"immutable","name":"i_gaslane","nameLocation":"908:9:3","nodeType":"VariableDeclaration","scope":389,"src":"882:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"882:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":199,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"949:16:3","nodeType":"VariableDeclaration","scope":389,"src":"924:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":198,"name":"uint64","nodeType":"ElementaryTypeName","src":"924:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":201,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"997:18:3","nodeType":"VariableDeclaration","scope":389,"src":"972:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":200,"name":"uint32","nodeType":"ElementaryTypeName","src":"972:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":204,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"1046:21:3","nodeType":"VariableDeclaration","scope":389,"src":"1022:49:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":202,"name":"uint16","nodeType":"ElementaryTypeName","src":"1022:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1070:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":207,"mutability":"constant","name":"NUM_WORDS","nameLocation":"1102:9:3","nodeType":"VariableDeclaration","scope":389,"src":"1078:37:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":205,"name":"uint16","nodeType":"ElementaryTypeName","src":"1078:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1114:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":209,"mutability":"mutable","name":"s_recentWinner","nameLocation":"1165:14:3","nodeType":"VariableDeclaration","scope":389,"src":"1149:30:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":213,"name":"RaffleEnter","nameLocation":"1208:11:3","nodeType":"EventDefinition","parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1236:6:3","nodeType":"VariableDeclaration","scope":213,"src":"1220:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":210,"name":"address","nodeType":"ElementaryTypeName","src":"1220:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1219:24:3"},"src":"1202:42:3"},{"anonymous":false,"id":217,"name":"RequestedRaffleWinner","nameLocation":"1256:21:3","nodeType":"EventDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1294:9:3","nodeType":"VariableDeclaration","scope":217,"src":"1278:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1277:27:3"},"src":"1250:55:3"},{"anonymous":false,"id":221,"name":"WinnerPicker","nameLocation":"1317:12:3","nodeType":"EventDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"1346:6:3","nodeType":"VariableDeclaration","scope":221,"src":"1330:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":218,"name":"address","nodeType":"ElementaryTypeName","src":"1330:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1329:24:3"},"src":"1311:43:3"},{"body":{"id":259,"nodeType":"Block","src":"1589:241:3","statements":[{"expression":{"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":237,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1600:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":238,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"1616:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1600:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":240,"nodeType":"ExpressionStatement","src":"1600:27:3"},{"expression":{"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":241,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"1638:16:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":243,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"1683:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":242,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"1657:25:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$172_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1657:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1638:62:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"id":246,"nodeType":"ExpressionStatement","src":"1638:62:3"},{"expression":{"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":247,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"1711:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":248,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"1723:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1711:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":250,"nodeType":"ExpressionStatement","src":"1711:19:3"},{"expression":{"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":251,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1741:16:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":252,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1760:14:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1741:33:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":254,"nodeType":"ExpressionStatement","src":"1741:33:3"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":255,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"1785:18:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1806:16:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1785:37:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":258,"nodeType":"ExpressionStatement","src":"1785:37:3"}]},"id":260,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":234,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"1572:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":235,"kind":"baseConstructorSpecifier","modifierName":{"id":233,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1554:17:3"},"nodeType":"ModifierInvocation","src":"1554:35:3"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1392:16:3","nodeType":"VariableDeclaration","scope":260,"src":"1384:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":222,"name":"address","nodeType":"ElementaryTypeName","src":"1384:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":225,"mutability":"mutable","name":"entranceFee","nameLocation":"1428:11:3","nodeType":"VariableDeclaration","scope":260,"src":"1420:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":224,"name":"uint256","nodeType":"ElementaryTypeName","src":"1420:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":227,"mutability":"mutable","name":"gasLane","nameLocation":"1459:7:3","nodeType":"VariableDeclaration","scope":260,"src":"1451:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1451:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"subscriptionId","nameLocation":"1484:14:3","nodeType":"VariableDeclaration","scope":260,"src":"1477:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":228,"name":"uint64","nodeType":"ElementaryTypeName","src":"1477:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1516:16:3","nodeType":"VariableDeclaration","scope":260,"src":"1509:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":230,"name":"uint32","nodeType":"ElementaryTypeName","src":"1509:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1373:170:3"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"1589:0:3"},"scope":389,"src":"1362:468:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":287,"nodeType":"Block","src":"1879:328:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":263,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1973:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"1973:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":265,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1985:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1973:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":271,"nodeType":"IfStatement","src":"1970:93:3","trueBody":{"id":270,"nodeType":"Block","src":"2000:63:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":267,"name":"Raffle__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"2022:27:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2022:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":269,"nodeType":"RevertStatement","src":"2015:36:3"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":277,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2096:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2096:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2088:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":275,"name":"address","nodeType":"ElementaryTypeName","src":"2088:8:3","stateMutability":"payable","typeDescriptions":{}}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2088:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":272,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2073:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2073:14:3","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2073:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":281,"nodeType":"ExpressionStatement","src":"2073:35:3"},{"eventCall":{"arguments":[{"expression":{"id":283,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2188:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2188:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":282,"name":"RaffleEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"2176:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2176:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":286,"nodeType":"EmitStatement","src":"2171:28:3"}]},"functionSelector":"2cfcc539","id":288,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"1851:11:3","nodeType":"FunctionDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[],"src":"1862:2:3"},"returnParameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"1879:0:3"},"scope":389,"src":"1842:365:3","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":306,"nodeType":"Block","src":"2255:356:3","statements":[{"assignments":[292],"declarations":[{"constant":false,"id":292,"mutability":"mutable","name":"requestId","nameLocation":"2349:9:3","nodeType":"VariableDeclaration","scope":306,"src":"2341:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":291,"name":"uint256","nodeType":"ElementaryTypeName","src":"2341:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":301,"initialValue":{"arguments":[{"id":295,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"2411:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":296,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"2435:16:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":297,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"2466:21:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":298,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"2502:18:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":299,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"2535:9:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":293,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2361:16:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":105,"src":"2361:35:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2361:194:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2341:214:3"},{"eventCall":{"arguments":[{"id":303,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"2593:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":302,"name":"RequestedRaffleWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2571:21:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2571:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":305,"nodeType":"EmitStatement","src":"2566:37:3"}]},"functionSelector":"522a1f0b","id":307,"implemented":true,"kind":"function","modifiers":[],"name":"requestRandomWinner","nameLocation":"2224:19:3","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[],"src":"2243:2:3"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"2255:0:3"},"scope":389,"src":"2215:396:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[30],"body":{"id":359,"nodeType":"Block","src":"2714:382:3","statements":[{"assignments":[317],"declarations":[{"constant":false,"id":317,"mutability":"mutable","name":"winnerIndex","nameLocation":"2733:11:3","nodeType":"VariableDeclaration","scope":359,"src":"2725:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"2725:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":324,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":318,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2747:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":320,"indexExpression":{"hexValue":"30","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2759:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2747:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":321,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2764:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2764:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2725:55:3"},{"assignments":[326],"declarations":[{"constant":false,"id":326,"mutability":"mutable","name":"recentWinner","nameLocation":"2807:12:3","nodeType":"VariableDeclaration","scope":359,"src":"2791:28:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":325,"name":"address","nodeType":"ElementaryTypeName","src":"2791:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":330,"initialValue":{"baseExpression":{"id":327,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2822:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":329,"indexExpression":{"id":328,"name":"winnerIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"2832:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2822:22:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"2791:53:3"},{"expression":{"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":331,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2855:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":332,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"2872:12:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2855:29:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":334,"nodeType":"ExpressionStatement","src":"2855:29:3"},{"assignments":[336,null],"declarations":[{"constant":false,"id":336,"mutability":"mutable","name":"success","nameLocation":"2901:7:3","nodeType":"VariableDeclaration","scope":359,"src":"2896:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":335,"name":"bool","nodeType":"ElementaryTypeName","src":"2896:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":347,"initialValue":{"arguments":[{"hexValue":"","id":345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2962:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":337,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"2914:12:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2914:17:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":341,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2947:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$389","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$389","typeString":"contract Raffle"}],"id":340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2939:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"2939:7:3","typeDescriptions":{}}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2939:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2939:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2914:47:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2914:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2895:70:3"},{"condition":{"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2979:8:3","subExpression":{"id":348,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"2980:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":354,"nodeType":"IfStatement","src":"2976:71:3","trueBody":{"id":353,"nodeType":"Block","src":"2989:58:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":350,"name":"Raffle__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"3011:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3011:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":352,"nodeType":"RevertStatement","src":"3004:31:3"}]}},{"eventCall":{"arguments":[{"id":356,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"3075:12:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":355,"name":"WinnerPicker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3062:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3062:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":358,"nodeType":"EmitStatement","src":"3057:31:3"}]},"id":360,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"2628:18:3","nodeType":"FunctionDefinition","overrides":{"id":314,"nodeType":"OverrideSpecifier","overrides":[],"src":"2705:8:3"},"parameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"requestId","nameLocation":"2655:9:3","nodeType":"VariableDeclaration","scope":360,"src":"2647:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":308,"name":"uint256","nodeType":"ElementaryTypeName","src":"2647:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":312,"mutability":"mutable","name":"randomWords","nameLocation":"2683:11:3","nodeType":"VariableDeclaration","scope":360,"src":"2666:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"2666:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":311,"nodeType":"ArrayTypeName","src":"2666:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2646:49:3"},"returnParameters":{"id":315,"nodeType":"ParameterList","parameters":[],"src":"2714:0:3"},"scope":389,"src":"2619:477:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":367,"nodeType":"Block","src":"3178:39:3","statements":[{"expression":{"id":365,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"3196:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":364,"id":366,"nodeType":"Return","src":"3189:20:3"}]},"functionSelector":"09bc33a7","id":368,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"3131:14:3","nodeType":"FunctionDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"3145:2:3"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":368,"src":"3169:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":362,"name":"uint256","nodeType":"ElementaryTypeName","src":"3169:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3168:9:3"},"scope":389,"src":"3122:95:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":379,"nodeType":"Block","src":"3297:42:3","statements":[{"expression":{"baseExpression":{"id":375,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3315:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":377,"indexExpression":{"id":376,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"3325:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3315:16:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":374,"id":378,"nodeType":"Return","src":"3308:23:3"}]},"functionSelector":"e55ae4e8","id":380,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"3234:9:3","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"mutability":"mutable","name":"index","nameLocation":"3252:5:3","nodeType":"VariableDeclaration","scope":380,"src":"3244:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":369,"name":"uint256","nodeType":"ElementaryTypeName","src":"3244:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3243:15:3"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":380,"src":"3280:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":372,"name":"address","nodeType":"ElementaryTypeName","src":"3280:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3279:17:3"},"scope":389,"src":"3225:114:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":387,"nodeType":"Block","src":"3404:40:3","statements":[{"expression":{"id":385,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"3422:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":384,"id":386,"nodeType":"Return","src":"3415:21:3"}]},"functionSelector":"473f1ddc","id":388,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"3356:15:3","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"3371:2:3"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":388,"src":"3395:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"3395:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3394:9:3"},"scope":389,"src":"3347:97:3","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":390,"src":"657:2790:3","usedErrors":[8,179,181]}],"src":"32:3415:3"},"id":3}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/Raffle.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle__NotEnoughETHEntered","type":"error"},{"inputs":[],"name":"Raffle__TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffleEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"RequestedRaffleWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"WinnerPicker","type":"event"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestRandomWinner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_260":{"entryPoint":null,"id":260,"parameterSlots":5,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":251,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":274,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":297,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32_fromMemory":{"entryPoint":366,"id":null,"parameterSlots":2,"returnSlots":5},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":502,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":522,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":532,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":564,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":574,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":590,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":610,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":615,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":641,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":667,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":693,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":719,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3293:4","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:4","statements":[{"nodeType":"YulAssignment","src":"80:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:4"},"nodeType":"YulFunctionCall","src":"89:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:4"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:4"},"nodeType":"YulFunctionCall","src":"111:33:4"},"nodeType":"YulExpressionStatement","src":"111:33:4"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:4","type":""}],"src":"7:143:4"},{"body":{"nodeType":"YulBlock","src":"219:80:4","statements":[{"nodeType":"YulAssignment","src":"229:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"244:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"238:5:4"},"nodeType":"YulFunctionCall","src":"238:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"287:5:4"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"260:26:4"},"nodeType":"YulFunctionCall","src":"260:33:4"},"nodeType":"YulExpressionStatement","src":"260:33:4"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"197:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"205:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"213:5:4","type":""}],"src":"156:143:4"},{"body":{"nodeType":"YulBlock","src":"368:80:4","statements":[{"nodeType":"YulAssignment","src":"378:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"393:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"387:5:4"},"nodeType":"YulFunctionCall","src":"387:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"436:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"409:26:4"},"nodeType":"YulFunctionCall","src":"409:33:4"},"nodeType":"YulExpressionStatement","src":"409:33:4"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"346:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"354:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"362:5:4","type":""}],"src":"305:143:4"},{"body":{"nodeType":"YulBlock","src":"516:79:4","statements":[{"nodeType":"YulAssignment","src":"526:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"541:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"535:5:4"},"nodeType":"YulFunctionCall","src":"535:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"526:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"583:5:4"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"557:25:4"},"nodeType":"YulFunctionCall","src":"557:32:4"},"nodeType":"YulExpressionStatement","src":"557:32:4"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"494:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"502:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"510:5:4","type":""}],"src":"454:141:4"},{"body":{"nodeType":"YulBlock","src":"663:79:4","statements":[{"nodeType":"YulAssignment","src":"673:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"688:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"682:5:4"},"nodeType":"YulFunctionCall","src":"682:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"673:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:4"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"704:25:4"},"nodeType":"YulFunctionCall","src":"704:32:4"},"nodeType":"YulExpressionStatement","src":"704:32:4"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"641:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"649:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"657:5:4","type":""}],"src":"601:141:4"},{"body":{"nodeType":"YulBlock","src":"891:830:4","statements":[{"body":{"nodeType":"YulBlock","src":"938:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"940:77:4"},"nodeType":"YulFunctionCall","src":"940:79:4"},"nodeType":"YulExpressionStatement","src":"940:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"912:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"921:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"908:3:4"},"nodeType":"YulFunctionCall","src":"908:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"933:3:4","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"904:3:4"},"nodeType":"YulFunctionCall","src":"904:33:4"},"nodeType":"YulIf","src":"901:120:4"},{"nodeType":"YulBlock","src":"1031:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1046:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1060:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1050:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1075:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1121:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1132:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1117:3:4"},"nodeType":"YulFunctionCall","src":"1117:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1141:7:4"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1085:31:4"},"nodeType":"YulFunctionCall","src":"1085:64:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1075:6:4"}]}]},{"nodeType":"YulBlock","src":"1169:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1184:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1198:2:4","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1188:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1214:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1260:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1271:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1256:3:4"},"nodeType":"YulFunctionCall","src":"1256:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1280:7:4"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1224:31:4"},"nodeType":"YulFunctionCall","src":"1224:64:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1214:6:4"}]}]},{"nodeType":"YulBlock","src":"1308:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1323:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1337:2:4","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1327:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1353:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1399:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1410:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1395:3:4"},"nodeType":"YulFunctionCall","src":"1395:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1419:7:4"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"1363:31:4"},"nodeType":"YulFunctionCall","src":"1363:64:4"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1353:6:4"}]}]},{"nodeType":"YulBlock","src":"1447:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1462:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1476:2:4","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1466:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1492:73:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1548:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:4"},"nodeType":"YulFunctionCall","src":"1533:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1557:7:4"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"1502:30:4"},"nodeType":"YulFunctionCall","src":"1502:63:4"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1492:6:4"}]}]},{"nodeType":"YulBlock","src":"1585:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1600:17:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1614:3:4","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1604:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1631:73:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1676:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1687:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1672:3:4"},"nodeType":"YulFunctionCall","src":"1672:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1696:7:4"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1641:30:4"},"nodeType":"YulFunctionCall","src":"1641:63:4"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1631:6:4"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"829:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"840:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"852:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"860:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"868:6:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"876:6:4","type":""},{"name":"value4","nodeType":"YulTypedName","src":"884:6:4","type":""}],"src":"748:973:4"},{"body":{"nodeType":"YulBlock","src":"1767:35:4","statements":[{"nodeType":"YulAssignment","src":"1777:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1793:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1787:5:4"},"nodeType":"YulFunctionCall","src":"1787:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1777:6:4"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1760:6:4","type":""}],"src":"1727:75:4"},{"body":{"nodeType":"YulBlock","src":"1853:51:4","statements":[{"nodeType":"YulAssignment","src":"1863:35:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:4"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:4"},"nodeType":"YulFunctionCall","src":"1874:24:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:4"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:4","type":""}],"src":"1808:96:4"},{"body":{"nodeType":"YulBlock","src":"1955:32:4","statements":[{"nodeType":"YulAssignment","src":"1965:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"1976:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1965:7:4"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1937:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1947:7:4","type":""}],"src":"1910:77:4"},{"body":{"nodeType":"YulBlock","src":"2038:81:4","statements":[{"nodeType":"YulAssignment","src":"2048:65:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2063:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2070:42:4","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2059:3:4"},"nodeType":"YulFunctionCall","src":"2059:54:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2048:7:4"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2020:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2030:7:4","type":""}],"src":"1993:126:4"},{"body":{"nodeType":"YulBlock","src":"2170:32:4","statements":[{"nodeType":"YulAssignment","src":"2180:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"2191:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2180:7:4"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2152:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2162:7:4","type":""}],"src":"2125:77:4"},{"body":{"nodeType":"YulBlock","src":"2252:49:4","statements":[{"nodeType":"YulAssignment","src":"2262:33:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2277:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2284:10:4","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2273:3:4"},"nodeType":"YulFunctionCall","src":"2273:22:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2262:7:4"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2234:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2244:7:4","type":""}],"src":"2208:93:4"},{"body":{"nodeType":"YulBlock","src":"2351:57:4","statements":[{"nodeType":"YulAssignment","src":"2361:41:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2376:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2383:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2372:3:4"},"nodeType":"YulFunctionCall","src":"2372:30:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2361:7:4"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2333:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2343:7:4","type":""}],"src":"2307:101:4"},{"body":{"nodeType":"YulBlock","src":"2503:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2520:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2523:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2513:6:4"},"nodeType":"YulFunctionCall","src":"2513:12:4"},"nodeType":"YulExpressionStatement","src":"2513:12:4"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2414:117:4"},{"body":{"nodeType":"YulBlock","src":"2626:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2643:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2646:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2636:6:4"},"nodeType":"YulFunctionCall","src":"2636:12:4"},"nodeType":"YulExpressionStatement","src":"2636:12:4"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2537:117:4"},{"body":{"nodeType":"YulBlock","src":"2703:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"2760:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2769:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2772:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2762:6:4"},"nodeType":"YulFunctionCall","src":"2762:12:4"},"nodeType":"YulExpressionStatement","src":"2762:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2726:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2751:5:4"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2733:17:4"},"nodeType":"YulFunctionCall","src":"2733:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2723:2:4"},"nodeType":"YulFunctionCall","src":"2723:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2716:6:4"},"nodeType":"YulFunctionCall","src":"2716:43:4"},"nodeType":"YulIf","src":"2713:63:4"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2696:5:4","type":""}],"src":"2660:122:4"},{"body":{"nodeType":"YulBlock","src":"2831:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"2888:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2897:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2900:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2890:6:4"},"nodeType":"YulFunctionCall","src":"2890:12:4"},"nodeType":"YulExpressionStatement","src":"2890:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2854:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2879:5:4"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2861:17:4"},"nodeType":"YulFunctionCall","src":"2861:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2851:2:4"},"nodeType":"YulFunctionCall","src":"2851:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2844:6:4"},"nodeType":"YulFunctionCall","src":"2844:43:4"},"nodeType":"YulIf","src":"2841:63:4"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2824:5:4","type":""}],"src":"2788:122:4"},{"body":{"nodeType":"YulBlock","src":"2959:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"3016:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3025:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3028:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3018:6:4"},"nodeType":"YulFunctionCall","src":"3018:12:4"},"nodeType":"YulExpressionStatement","src":"3018:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2982:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3007:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2989:17:4"},"nodeType":"YulFunctionCall","src":"2989:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2979:2:4"},"nodeType":"YulFunctionCall","src":"2979:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2972:6:4"},"nodeType":"YulFunctionCall","src":"2972:43:4"},"nodeType":"YulIf","src":"2969:63:4"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2952:5:4","type":""}],"src":"2916:122:4"},{"body":{"nodeType":"YulBlock","src":"3086:78:4","statements":[{"body":{"nodeType":"YulBlock","src":"3142:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3151:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3154:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3144:6:4"},"nodeType":"YulFunctionCall","src":"3144:12:4"},"nodeType":"YulExpressionStatement","src":"3144:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3109:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:4"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"3116:16:4"},"nodeType":"YulFunctionCall","src":"3116:23:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3106:2:4"},"nodeType":"YulFunctionCall","src":"3106:34:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3099:6:4"},"nodeType":"YulFunctionCall","src":"3099:42:4"},"nodeType":"YulIf","src":"3096:62:4"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3079:5:4","type":""}],"src":"3044:120:4"},{"body":{"nodeType":"YulBlock","src":"3212:78:4","statements":[{"body":{"nodeType":"YulBlock","src":"3268:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3277:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3280:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3270:6:4"},"nodeType":"YulFunctionCall","src":"3270:12:4"},"nodeType":"YulExpressionStatement","src":"3270:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3235:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3259:5:4"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3242:16:4"},"nodeType":"YulFunctionCall","src":"3242:23:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3232:2:4"},"nodeType":"YulFunctionCall","src":"3232:34:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3225:6:4"},"nodeType":"YulFunctionCall","src":"3225:42:4"},"nodeType":"YulIf","src":"3222:62:4"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3205:5:4","type":""}],"src":"3170:120:4"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n}\n","id":4,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b5060405162000f2438038062000f2483398181016040528101906200003891906200016e565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508360a081815250508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260e081815250508167ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508063ffffffff166101208163ffffffff1660e01b815250505050505050620002e9565b6000815190506200010c8162000267565b92915050565b600081519050620001238162000281565b92915050565b6000815190506200013a816200029b565b92915050565b6000815190506200015181620002b5565b92915050565b6000815190506200016881620002cf565b92915050565b600080600080600060a086880312156200018d576200018c62000262565b5b60006200019d88828901620000fb565b9550506020620001b08882890162000129565b9450506040620001c38882890162000112565b9350506060620001d68882890162000157565b9250506080620001e98882890162000140565b9150509295509295909350565b6000620002038262000214565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b6200027281620001f6565b81146200027e57600080fd5b50565b6200028c816200020a565b81146200029857600080fd5b50565b620002a68162000234565b8114620002b257600080fd5b50565b620002c0816200023e565b8114620002cc57600080fd5b50565b620002da816200024e565b8114620002e657600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610bd16200035360003960006103cf015260006103ac0152600061038b0152600061034f01526000818161013b015261022101526000818161016101526101b50152610bd16000f3fe6080604052600436106100555760003560e01c806309bc33a71461005a5780631fe543e3146100855780632cfcc539146100ae578063473f1ddc146100b8578063522a1f0b146100e3578063e55ae4e8146100fa575b600080fd5b34801561006657600080fd5b5061006f610137565b60405161007c919061095a565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a7919061079c565b61015f565b005b6100b661021f565b005b3480156100c457600080fd5b506100cd610321565b6040516100da91906108a8565b60405180910390f35b3480156100ef57600080fd5b506100f861034b565b005b34801561010657600080fd5b50610121600480360381019061011c9190610742565b610494565b60405161012e91906108c3565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102089291906108de565b60405180910390fd5b61021b82826104db565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610279576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610410959493929190610907565b602060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610462919061076f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b60008082815481106104a9576104a8610afe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106104f6576104f5610afe565b5b60200260200101516105089190610a9e565b9050600080828154811061051f5761051e610afe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516105b390610893565b60006040518083038185875af1925050503d80600081146105f0576040519150601f19603f3d011682016040523d82523d6000602084013e6105f5565b606091505b5050905080610630576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f81c79c7d3608cee5630ce7c2a8ff40ef0cccc37c2e59104e734691e3e76f59a460405160405180910390a25050505050565b600061068d6106888461099a565b610975565b905080838252602082019050828560208602820111156106b0576106af610b61565b5b60005b858110156106e057816106c68882610718565b8452602084019350602083019250506001810190506106b3565b5050509392505050565b600082601f8301126106ff576106fe610b5c565b5b813561070f84826020860161067a565b91505092915050565b60008135905061072781610b84565b92915050565b60008151905061073c81610b84565b92915050565b60006020828403121561075857610757610b6b565b5b600061076684828501610718565b91505092915050565b60006020828403121561078557610784610b6b565b5b60006107938482850161072d565b91505092915050565b600080604083850312156107b3576107b2610b6b565b5b60006107c185828601610718565b925050602083013567ffffffffffffffff8111156107e2576107e1610b66565b5b6107ee858286016106ea565b9150509250929050565b610801816109e3565b82525050565b610810816109d1565b82525050565b61081f816109f5565b82525050565b60006108326000836109c6565b915061083d82610b81565b600082019050919050565b610851816109ff565b82525050565b61086081610a5b565b82525050565b61086f81610a2d565b82525050565b61087e81610a37565b82525050565b61088d81610a47565b82525050565b600061089e82610825565b9150819050919050565b60006020820190506108bd6000830184610807565b92915050565b60006020820190506108d860008301846107f8565b92915050565b60006040820190506108f36000830185610807565b6109006020830184610807565b9392505050565b600060a08201905061091c6000830188610816565b6109296020830187610884565b6109366040830186610848565b6109436060830185610875565b6109506080830184610857565b9695505050505050565b600060208201905061096f6000830184610866565b92915050565b600061097f610990565b905061098b8282610a6d565b919050565b6000604051905090565b600067ffffffffffffffff8211156109b5576109b4610b2d565b5b602082029050602081019050919050565b600081905092915050565b60006109dc82610a0d565b9050919050565b60006109ee82610a0d565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610a66826109ff565b9050919050565b610a7682610b70565b810181811067ffffffffffffffff82111715610a9557610a94610b2d565b5b80604052505050565b6000610aa982610a2d565b9150610ab483610a2d565b925082610ac457610ac3610acf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b610b8d81610a2d565b8114610b9857600080fd5b5056fea26469706673582212205cadb46d86fede84d55c49670a9bc0e155a635522e4663215bbfe444e9c7763364736f6c63430008070033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xF24 CODESIZE SUB DUP1 PUSH3 0xF24 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x16E JUMP JUMPDEST DUP5 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP4 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP3 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x100 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x120 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP POP POP POP POP POP PUSH3 0x2E9 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x10C DUP2 PUSH3 0x267 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x123 DUP2 PUSH3 0x281 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x13A DUP2 PUSH3 0x29B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x151 DUP2 PUSH3 0x2B5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x168 DUP2 PUSH3 0x2CF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x18D JUMPI PUSH3 0x18C PUSH3 0x262 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x19D DUP9 DUP3 DUP10 ADD PUSH3 0xFB JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH3 0x1B0 DUP9 DUP3 DUP10 ADD PUSH3 0x129 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH3 0x1C3 DUP9 DUP3 DUP10 ADD PUSH3 0x112 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH3 0x1D6 DUP9 DUP3 DUP10 ADD PUSH3 0x157 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH3 0x1E9 DUP9 DUP3 DUP10 ADD PUSH3 0x140 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x203 DUP3 PUSH3 0x214 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x272 DUP2 PUSH3 0x1F6 JUMP JUMPDEST DUP2 EQ PUSH3 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x28C DUP2 PUSH3 0x20A JUMP JUMPDEST DUP2 EQ PUSH3 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x2A6 DUP2 PUSH3 0x234 JUMP JUMPDEST DUP2 EQ PUSH3 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x2C0 DUP2 PUSH3 0x23E JUMP JUMPDEST DUP2 EQ PUSH3 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x2DA DUP2 PUSH3 0x24E JUMP JUMPDEST DUP2 EQ PUSH3 0x2E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xC0 SHR PUSH2 0x120 MLOAD PUSH1 0xE0 SHR PUSH2 0xBD1 PUSH3 0x353 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x3CF ADD MSTORE PUSH1 0x0 PUSH2 0x3AC ADD MSTORE PUSH1 0x0 PUSH2 0x38B ADD MSTORE PUSH1 0x0 PUSH2 0x34F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x13B ADD MSTORE PUSH2 0x221 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x161 ADD MSTORE PUSH2 0x1B5 ADD MSTORE PUSH2 0xBD1 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x522A1F0B EQ PUSH2 0xE3 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xFA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x137 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x95A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA7 SWAP2 SWAP1 PUSH2 0x79C JUMP JUMPDEST PUSH2 0x15F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB6 PUSH2 0x21F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDA SWAP2 SWAP1 PUSH2 0x8A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH2 0x34B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11C SWAP2 SWAP1 PUSH2 0x742 JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0x8C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x211 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x208 SWAP3 SWAP2 SWAP1 PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21B DUP3 DUP3 PUSH2 0x4DB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x907 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x462 SWAP2 SWAP1 PUSH2 0x76F JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4A9 JUMPI PUSH2 0x4A8 PUSH2 0xAFE JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4F6 JUMPI PUSH2 0x4F5 PUSH2 0xAFE JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH2 0x51E PUSH2 0xAFE JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x5B3 SWAP1 PUSH2 0x893 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x630 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x81C79C7D3608CEE5630CE7C2A8FF40EF0CCCC37C2E59104E734691E3E76F59A4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x68D PUSH2 0x688 DUP5 PUSH2 0x99A JUMP JUMPDEST PUSH2 0x975 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x6B0 JUMPI PUSH2 0x6AF PUSH2 0xB61 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x6E0 JUMPI DUP2 PUSH2 0x6C6 DUP9 DUP3 PUSH2 0x718 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x6B3 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6FF JUMPI PUSH2 0x6FE PUSH2 0xB5C JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x70F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x67A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x727 DUP2 PUSH2 0xB84 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x73C DUP2 PUSH2 0xB84 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x758 JUMPI PUSH2 0x757 PUSH2 0xB6B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x766 DUP5 DUP3 DUP6 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x785 JUMPI PUSH2 0x784 PUSH2 0xB6B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x793 DUP5 DUP3 DUP6 ADD PUSH2 0x72D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7B3 JUMPI PUSH2 0x7B2 PUSH2 0xB6B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x7C1 DUP6 DUP3 DUP7 ADD PUSH2 0x718 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7E2 JUMPI PUSH2 0x7E1 PUSH2 0xB66 JUMP JUMPDEST JUMPDEST PUSH2 0x7EE DUP6 DUP3 DUP7 ADD PUSH2 0x6EA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x801 DUP2 PUSH2 0x9E3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x810 DUP2 PUSH2 0x9D1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x81F DUP2 PUSH2 0x9F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x832 PUSH1 0x0 DUP4 PUSH2 0x9C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x83D DUP3 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x851 DUP2 PUSH2 0x9FF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x860 DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x86F DUP2 PUSH2 0xA2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x87E DUP2 PUSH2 0xA37 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x88D DUP2 PUSH2 0xA47 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP3 PUSH2 0x825 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8BD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x807 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x7F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x8F3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x900 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x807 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x91C PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x816 JUMP JUMPDEST PUSH2 0x929 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x884 JUMP JUMPDEST PUSH2 0x936 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x848 JUMP JUMPDEST PUSH2 0x943 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x875 JUMP JUMPDEST PUSH2 0x950 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x857 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x96F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x866 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97F PUSH2 0x990 JUMP JUMPDEST SWAP1 POP PUSH2 0x98B DUP3 DUP3 PUSH2 0xA6D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9B4 PUSH2 0xB2D JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9DC DUP3 PUSH2 0xA0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EE DUP3 PUSH2 0xA0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA66 DUP3 PUSH2 0x9FF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA76 DUP3 PUSH2 0xB70 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xA95 JUMPI PUSH2 0xA94 PUSH2 0xB2D JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAA9 DUP3 PUSH2 0xA2D JUMP JUMPDEST SWAP2 POP PUSH2 0xAB4 DUP4 PUSH2 0xA2D JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xAC4 JUMPI PUSH2 0xAC3 PUSH2 0xACF JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB8D DUP2 PUSH2 0xA2D JUMP JUMPDEST DUP2 EQ PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xAD 0xB4 PUSH14 0x86FEDE84D55C49670A9BC0E155A6 CALLDATALOAD MSTORE 0x2E CHAINID PUSH4 0x215BBFE4 DIFFICULTY 0xE9 0xC7 PUSH23 0x3364736F6C634300080700330000000000000000000000 ","sourceMap":"657:2790:3:-:0;;;1362:468;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1572:16;5616:15:0;5599:32;;;;;;;;;;;;5556:80;1616:11:3::1;1600:27;;;;::::0;::::1;1683:16;1638:62;;;;;;;;;;::::0;::::1;1723:7;1711:19;;;;::::0;::::1;1760:14;1741:33;;;;;;;;;;::::0;::::1;1806:16;1785:37;;;;;;;;;;::::0;::::1;1362:468:::0;;;;;657:2790;;7:143:4;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:::-;213:5;244:6;238:13;229:22;;260:33;287:5;260:33;:::i;:::-;156:143;;;;:::o;305:::-;362:5;393:6;387:13;378:22;;409:33;436:5;409:33;:::i;:::-;305:143;;;;:::o;454:141::-;510:5;541:6;535:13;526:22;;557:32;583:5;557:32;:::i;:::-;454:141;;;;:::o;601:::-;657:5;688:6;682:13;673:22;;704:32;730:5;704:32;:::i;:::-;601:141;;;;:::o;748:973::-;852:6;860;868;876;884;933:3;921:9;912:7;908:23;904:33;901:120;;;940:79;;:::i;:::-;901:120;1060:1;1085:64;1141:7;1132:6;1121:9;1117:22;1085:64;:::i;:::-;1075:74;;1031:128;1198:2;1224:64;1280:7;1271:6;1260:9;1256:22;1224:64;:::i;:::-;1214:74;;1169:129;1337:2;1363:64;1419:7;1410:6;1399:9;1395:22;1363:64;:::i;:::-;1353:74;;1308:129;1476:2;1502:63;1557:7;1548:6;1537:9;1533:22;1502:63;:::i;:::-;1492:73;;1447:128;1614:3;1641:63;1696:7;1687:6;1676:9;1672:22;1641:63;:::i;:::-;1631:73;;1585:129;748:973;;;;;;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:77::-;1947:7;1976:5;1965:16;;1910:77;;;:::o;1993:126::-;2030:7;2070:42;2063:5;2059:54;2048:65;;1993:126;;;:::o;2125:77::-;2162:7;2191:5;2180:16;;2125:77;;;:::o;2208:93::-;2244:7;2284:10;2277:5;2273:22;2262:33;;2208:93;;;:::o;2307:101::-;2343:7;2383:18;2376:5;2372:30;2361:41;;2307:101;;;:::o;2537:117::-;2646:1;2643;2636:12;2660:122;2733:24;2751:5;2733:24;:::i;:::-;2726:5;2723:35;2713:63;;2772:1;2769;2762:12;2713:63;2660:122;:::o;2788:::-;2861:24;2879:5;2861:24;:::i;:::-;2854:5;2851:35;2841:63;;2900:1;2897;2890:12;2841:63;2788:122;:::o;2916:::-;2989:24;3007:5;2989:24;:::i;:::-;2982:5;2979:35;2969:63;;3028:1;3025;3018:12;2969:63;2916:122;:::o;3044:120::-;3116:23;3133:5;3116:23;:::i;:::-;3109:5;3106:34;3096:62;;3154:1;3151;3144:12;3096:62;3044:120;:::o;3170:::-;3242:23;3259:5;3242:23;:::i;:::-;3235:5;3232:34;3222:62;;3280:1;3277;3270:12;3222:62;3170:120;:::o;657:2790:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@enterRaffle_288":{"entryPoint":543,"id":288,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_360":{"entryPoint":1243,"id":360,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_368":{"entryPoint":311,"id":368,"parameterSlots":0,"returnSlots":1},"@getPlayer_380":{"entryPoint":1172,"id":380,"parameterSlots":1,"returnSlots":1},"@getRecentWinner_388":{"entryPoint":801,"id":388,"parameterSlots":0,"returnSlots":1},"@rawFulfillRandomWords_56":{"entryPoint":351,"id":56,"parameterSlots":2,"returnSlots":0},"@requestRandomWinner_307":{"entryPoint":843,"id":307,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1658,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1770,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":1816,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":1837,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1858,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":1903,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1948,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_payable_to_t_address_payable_fromStack":{"entryPoint":2040,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2055,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":2070,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2085,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":2120,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint32_fromStack":{"entryPoint":2135,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2150,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":2165,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":2180,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":2195,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2216,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":2243,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":2270,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint16__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":2311,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2394,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2421,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2448,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2458,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2502,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2513,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address_payable":{"entryPoint":2531,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2549,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":2559,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2573,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2605,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":2615,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":2631,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint16_to_t_uint32":{"entryPoint":2651,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":2669,"id":null,"parameterSlots":2,"returnSlots":0},"mod_t_uint256":{"entryPoint":2718,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x12":{"entryPoint":2767,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2814,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2861,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2908,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2913,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2918,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2923,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2928,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":2945,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2948,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9819:4","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:4","statements":[{"nodeType":"YulAssignment","src":"136:90:4","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:4"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:4"},"nodeType":"YulFunctionCall","src":"161:64:4"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:4"},"nodeType":"YulFunctionCall","src":"145:81:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:4"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:4","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:4"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:4","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:4"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:4"},"nodeType":"YulFunctionCall","src":"261:21:4"},"nodeType":"YulExpressionStatement","src":"261:21:4"},{"nodeType":"YulAssignment","src":"291:23:4","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:4"},"nodeType":"YulFunctionCall","src":"298:16:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:4"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:4","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:4"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:4"},"nodeType":"YulFunctionCall","src":"404:79:4"},"nodeType":"YulExpressionStatement","src":"404:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:4"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:4","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:4"},"nodeType":"YulFunctionCall","src":"365:17:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:4"},"nodeType":"YulFunctionCall","src":"356:27:4"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:4"},"nodeType":"YulFunctionCall","src":"353:36:4"},"nodeType":"YulIf","src":"350:143:4"},{"body":{"nodeType":"YulBlock","src":"562:178:4","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:4","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:4"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:4","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:4"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:4"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"624:20:4"},"nodeType":"YulFunctionCall","src":"624:37:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:4"},"nodeType":"YulFunctionCall","src":"612:50:4"},"nodeType":"YulExpressionStatement","src":"612:50:4"},{"nodeType":"YulAssignment","src":"675:21:4","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:4"},"nodeType":"YulFunctionCall","src":"682:14:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:4"}]},{"nodeType":"YulAssignment","src":"709:21:4","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:4"},"nodeType":"YulFunctionCall","src":"716:14:4"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:4"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:4"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:4"},"nodeType":"YulFunctionCall","src":"521:13:4"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:4","statements":[{"nodeType":"YulAssignment","src":"537:14:4","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:4"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:4","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:4"},"nodeType":"YulFunctionCall","src":"542:9:4"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:4"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:4","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:4","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:4","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:4","type":""}]}]},"src":"502:238:4"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:4","type":""}],"src":"24:722:4"},{"body":{"nodeType":"YulBlock","src":"846:293:4","statements":[{"body":{"nodeType":"YulBlock","src":"895:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"897:77:4"},"nodeType":"YulFunctionCall","src":"897:79:4"},"nodeType":"YulExpressionStatement","src":"897:79:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"874:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"882:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"870:3:4"},"nodeType":"YulFunctionCall","src":"870:17:4"},{"name":"end","nodeType":"YulIdentifier","src":"889:3:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"866:3:4"},"nodeType":"YulFunctionCall","src":"866:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"859:6:4"},"nodeType":"YulFunctionCall","src":"859:35:4"},"nodeType":"YulIf","src":"856:122:4"},{"nodeType":"YulVariableDeclaration","src":"987:34:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1014:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1001:12:4"},"nodeType":"YulFunctionCall","src":"1001:20:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"991:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1030:103:4","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1106:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"1114:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1102:3:4"},"nodeType":"YulFunctionCall","src":"1102:17:4"},{"name":"length","nodeType":"YulIdentifier","src":"1121:6:4"},{"name":"end","nodeType":"YulIdentifier","src":"1129:3:4"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1039:62:4"},"nodeType":"YulFunctionCall","src":"1039:94:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1030:5:4"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"824:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"832:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"840:5:4","type":""}],"src":"769:370:4"},{"body":{"nodeType":"YulBlock","src":"1197:87:4","statements":[{"nodeType":"YulAssignment","src":"1207:29:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1229:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1216:12:4"},"nodeType":"YulFunctionCall","src":"1216:20:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1207:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1272:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1245:26:4"},"nodeType":"YulFunctionCall","src":"1245:33:4"},"nodeType":"YulExpressionStatement","src":"1245:33:4"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1175:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"1183:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1191:5:4","type":""}],"src":"1145:139:4"},{"body":{"nodeType":"YulBlock","src":"1353:80:4","statements":[{"nodeType":"YulAssignment","src":"1363:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1378:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1372:5:4"},"nodeType":"YulFunctionCall","src":"1372:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1363:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1421:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1394:26:4"},"nodeType":"YulFunctionCall","src":"1394:33:4"},"nodeType":"YulExpressionStatement","src":"1394:33:4"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1331:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"1339:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1347:5:4","type":""}],"src":"1290:143:4"},{"body":{"nodeType":"YulBlock","src":"1505:263:4","statements":[{"body":{"nodeType":"YulBlock","src":"1551:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1553:77:4"},"nodeType":"YulFunctionCall","src":"1553:79:4"},"nodeType":"YulExpressionStatement","src":"1553:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1526:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1522:3:4"},"nodeType":"YulFunctionCall","src":"1522:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"1547:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1518:3:4"},"nodeType":"YulFunctionCall","src":"1518:32:4"},"nodeType":"YulIf","src":"1515:119:4"},{"nodeType":"YulBlock","src":"1644:117:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1659:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1673:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1663:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1688:63:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1723:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1734:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1719:3:4"},"nodeType":"YulFunctionCall","src":"1719:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1743:7:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1698:20:4"},"nodeType":"YulFunctionCall","src":"1698:53:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1688:6:4"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1475:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1486:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1498:6:4","type":""}],"src":"1439:329:4"},{"body":{"nodeType":"YulBlock","src":"1851:274:4","statements":[{"body":{"nodeType":"YulBlock","src":"1897:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1899:77:4"},"nodeType":"YulFunctionCall","src":"1899:79:4"},"nodeType":"YulExpressionStatement","src":"1899:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1872:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"1881:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1868:3:4"},"nodeType":"YulFunctionCall","src":"1868:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"1893:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1864:3:4"},"nodeType":"YulFunctionCall","src":"1864:32:4"},"nodeType":"YulIf","src":"1861:119:4"},{"nodeType":"YulBlock","src":"1990:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2005:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2019:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2009:6:4","type":""}]},{"nodeType":"YulAssignment","src":"2034:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2080:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2091:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2076:3:4"},"nodeType":"YulFunctionCall","src":"2076:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2100:7:4"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2044:31:4"},"nodeType":"YulFunctionCall","src":"2044:64:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2034:6:4"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1821:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1832:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1844:6:4","type":""}],"src":"1774:351:4"},{"body":{"nodeType":"YulBlock","src":"2239:576:4","statements":[{"body":{"nodeType":"YulBlock","src":"2285:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2287:77:4"},"nodeType":"YulFunctionCall","src":"2287:79:4"},"nodeType":"YulExpressionStatement","src":"2287:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2260:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"2269:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2256:3:4"},"nodeType":"YulFunctionCall","src":"2256:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"2281:2:4","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2252:3:4"},"nodeType":"YulFunctionCall","src":"2252:32:4"},"nodeType":"YulIf","src":"2249:119:4"},{"nodeType":"YulBlock","src":"2378:117:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2393:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2407:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2397:6:4","type":""}]},{"nodeType":"YulAssignment","src":"2422:63:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2457:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2453:3:4"},"nodeType":"YulFunctionCall","src":"2453:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2477:7:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2432:20:4"},"nodeType":"YulFunctionCall","src":"2432:53:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2422:6:4"}]}]},{"nodeType":"YulBlock","src":"2505:303:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2520:46:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2551:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"2562:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2547:3:4"},"nodeType":"YulFunctionCall","src":"2547:18:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2534:12:4"},"nodeType":"YulFunctionCall","src":"2534:32:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2524:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2613:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"2615:77:4"},"nodeType":"YulFunctionCall","src":"2615:79:4"},"nodeType":"YulExpressionStatement","src":"2615:79:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2585:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"2593:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2582:2:4"},"nodeType":"YulFunctionCall","src":"2582:30:4"},"nodeType":"YulIf","src":"2579:117:4"},{"nodeType":"YulAssignment","src":"2710:88:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2770:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2781:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2766:3:4"},"nodeType":"YulFunctionCall","src":"2766:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2790:7:4"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2720:45:4"},"nodeType":"YulFunctionCall","src":"2720:78:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2710:6:4"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2201:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2212:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2224:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2232:6:4","type":""}],"src":"2131:684:4"},{"body":{"nodeType":"YulBlock","src":"2902:61:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2919:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2950:5:4"}],"functionName":{"name":"cleanup_t_address_payable","nodeType":"YulIdentifier","src":"2924:25:4"},"nodeType":"YulFunctionCall","src":"2924:32:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2912:6:4"},"nodeType":"YulFunctionCall","src":"2912:45:4"},"nodeType":"YulExpressionStatement","src":"2912:45:4"}]},"name":"abi_encode_t_address_payable_to_t_address_payable_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2890:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2897:3:4","type":""}],"src":"2821:142:4"},{"body":{"nodeType":"YulBlock","src":"3034:53:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3051:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3074:5:4"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3056:17:4"},"nodeType":"YulFunctionCall","src":"3056:24:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3044:6:4"},"nodeType":"YulFunctionCall","src":"3044:37:4"},"nodeType":"YulExpressionStatement","src":"3044:37:4"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3022:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3029:3:4","type":""}],"src":"2969:118:4"},{"body":{"nodeType":"YulBlock","src":"3158:53:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3175:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:4"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3180:17:4"},"nodeType":"YulFunctionCall","src":"3180:24:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3168:6:4"},"nodeType":"YulFunctionCall","src":"3168:37:4"},"nodeType":"YulExpressionStatement","src":"3168:37:4"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3146:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3153:3:4","type":""}],"src":"3093:118:4"},{"body":{"nodeType":"YulBlock","src":"3380:235:4","statements":[{"nodeType":"YulAssignment","src":"3390:90:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3473:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"3478:1:4","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"3397:75:4"},"nodeType":"YulFunctionCall","src":"3397:83:4"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3390:3:4"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3578:3:4"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"3489:88:4"},"nodeType":"YulFunctionCall","src":"3489:93:4"},"nodeType":"YulExpressionStatement","src":"3489:93:4"},{"nodeType":"YulAssignment","src":"3591:18:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3602:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"3607:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3598:3:4"},"nodeType":"YulFunctionCall","src":"3598:11:4"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3591:3:4"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3368:3:4","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3376:3:4","type":""}],"src":"3217:398:4"},{"body":{"nodeType":"YulBlock","src":"3684:52:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3701:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3723:5:4"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"3706:16:4"},"nodeType":"YulFunctionCall","src":"3706:23:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3694:6:4"},"nodeType":"YulFunctionCall","src":"3694:36:4"},"nodeType":"YulExpressionStatement","src":"3694:36:4"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3672:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3679:3:4","type":""}],"src":"3621:115:4"},{"body":{"nodeType":"YulBlock","src":"3805:64:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3822:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3856:5:4"}],"functionName":{"name":"convert_t_uint16_to_t_uint32","nodeType":"YulIdentifier","src":"3827:28:4"},"nodeType":"YulFunctionCall","src":"3827:35:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3815:6:4"},"nodeType":"YulFunctionCall","src":"3815:48:4"},"nodeType":"YulExpressionStatement","src":"3815:48:4"}]},"name":"abi_encode_t_uint16_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3793:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3800:3:4","type":""}],"src":"3742:127:4"},{"body":{"nodeType":"YulBlock","src":"3940:53:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3957:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3980:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3962:17:4"},"nodeType":"YulFunctionCall","src":"3962:24:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3950:6:4"},"nodeType":"YulFunctionCall","src":"3950:37:4"},"nodeType":"YulExpressionStatement","src":"3950:37:4"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3928:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3935:3:4","type":""}],"src":"3875:118:4"},{"body":{"nodeType":"YulBlock","src":"4062:52:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4079:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4101:5:4"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"4084:16:4"},"nodeType":"YulFunctionCall","src":"4084:23:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4072:6:4"},"nodeType":"YulFunctionCall","src":"4072:36:4"},"nodeType":"YulExpressionStatement","src":"4072:36:4"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4050:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4057:3:4","type":""}],"src":"3999:115:4"},{"body":{"nodeType":"YulBlock","src":"4183:52:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4200:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4222:5:4"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"4205:16:4"},"nodeType":"YulFunctionCall","src":"4205:23:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4193:6:4"},"nodeType":"YulFunctionCall","src":"4193:36:4"},"nodeType":"YulExpressionStatement","src":"4193:36:4"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4171:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4178:3:4","type":""}],"src":"4120:115:4"},{"body":{"nodeType":"YulBlock","src":"4429:191:4","statements":[{"nodeType":"YulAssignment","src":"4440:154:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4590:3:4"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"4447:141:4"},"nodeType":"YulFunctionCall","src":"4447:147:4"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4440:3:4"}]},{"nodeType":"YulAssignment","src":"4604:10:4","value":{"name":"pos","nodeType":"YulIdentifier","src":"4611:3:4"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4604:3:4"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4416:3:4","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4425:3:4","type":""}],"src":"4241:379:4"},{"body":{"nodeType":"YulBlock","src":"4724:124:4","statements":[{"nodeType":"YulAssignment","src":"4734:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4746:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4757:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4742:3:4"},"nodeType":"YulFunctionCall","src":"4742:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4734:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4814:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4827:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4838:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4823:3:4"},"nodeType":"YulFunctionCall","src":"4823:17:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4770:43:4"},"nodeType":"YulFunctionCall","src":"4770:71:4"},"nodeType":"YulExpressionStatement","src":"4770:71:4"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4696:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4708:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4719:4:4","type":""}],"src":"4626:222:4"},{"body":{"nodeType":"YulBlock","src":"4968:140:4","statements":[{"nodeType":"YulAssignment","src":"4978:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4990:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5001:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4986:3:4"},"nodeType":"YulFunctionCall","src":"4986:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4978:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5074:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5087:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5098:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5083:3:4"},"nodeType":"YulFunctionCall","src":"5083:17:4"}],"functionName":{"name":"abi_encode_t_address_payable_to_t_address_payable_fromStack","nodeType":"YulIdentifier","src":"5014:59:4"},"nodeType":"YulFunctionCall","src":"5014:87:4"},"nodeType":"YulExpressionStatement","src":"5014:87:4"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4940:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4952:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4963:4:4","type":""}],"src":"4854:254:4"},{"body":{"nodeType":"YulBlock","src":"5240:206:4","statements":[{"nodeType":"YulAssignment","src":"5250:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5262:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5273:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5258:3:4"},"nodeType":"YulFunctionCall","src":"5258:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5250:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5330:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5343:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5354:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5339:3:4"},"nodeType":"YulFunctionCall","src":"5339:17:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5286:43:4"},"nodeType":"YulFunctionCall","src":"5286:71:4"},"nodeType":"YulExpressionStatement","src":"5286:71:4"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5411:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5424:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5435:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5420:3:4"},"nodeType":"YulFunctionCall","src":"5420:18:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5367:43:4"},"nodeType":"YulFunctionCall","src":"5367:72:4"},"nodeType":"YulExpressionStatement","src":"5367:72:4"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5204:9:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5216:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5224:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5235:4:4","type":""}],"src":"5114:332:4"},{"body":{"nodeType":"YulBlock","src":"5654:446:4","statements":[{"nodeType":"YulAssignment","src":"5664:27:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5676:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5687:3:4","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5672:3:4"},"nodeType":"YulFunctionCall","src":"5672:19:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5664:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5745:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5758:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5769:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5754:3:4"},"nodeType":"YulFunctionCall","src":"5754:17:4"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5701:43:4"},"nodeType":"YulFunctionCall","src":"5701:71:4"},"nodeType":"YulExpressionStatement","src":"5701:71:4"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5824:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5837:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5848:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5833:3:4"},"nodeType":"YulFunctionCall","src":"5833:18:4"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"5782:41:4"},"nodeType":"YulFunctionCall","src":"5782:70:4"},"nodeType":"YulExpressionStatement","src":"5782:70:4"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5904:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5917:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5928:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5913:3:4"},"nodeType":"YulFunctionCall","src":"5913:18:4"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"5862:41:4"},"nodeType":"YulFunctionCall","src":"5862:70:4"},"nodeType":"YulExpressionStatement","src":"5862:70:4"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"5984:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5997:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"6008:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5993:3:4"},"nodeType":"YulFunctionCall","src":"5993:18:4"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"5942:41:4"},"nodeType":"YulFunctionCall","src":"5942:70:4"},"nodeType":"YulExpressionStatement","src":"5942:70:4"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"6064:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6077:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"6088:3:4","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6073:3:4"},"nodeType":"YulFunctionCall","src":"6073:19:4"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"6022:41:4"},"nodeType":"YulFunctionCall","src":"6022:71:4"},"nodeType":"YulExpressionStatement","src":"6022:71:4"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint16__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5594:9:4","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5606:6:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5614:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5622:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5630:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5638:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5649:4:4","type":""}],"src":"5452:648:4"},{"body":{"nodeType":"YulBlock","src":"6204:124:4","statements":[{"nodeType":"YulAssignment","src":"6214:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6226:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"6237:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6222:3:4"},"nodeType":"YulFunctionCall","src":"6222:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6214:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6294:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6307:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"6318:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6303:3:4"},"nodeType":"YulFunctionCall","src":"6303:17:4"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6250:43:4"},"nodeType":"YulFunctionCall","src":"6250:71:4"},"nodeType":"YulExpressionStatement","src":"6250:71:4"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6176:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6188:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6199:4:4","type":""}],"src":"6106:222:4"},{"body":{"nodeType":"YulBlock","src":"6375:88:4","statements":[{"nodeType":"YulAssignment","src":"6385:30:4","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"6395:18:4"},"nodeType":"YulFunctionCall","src":"6395:20:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6385:6:4"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6444:6:4"},{"name":"size","nodeType":"YulIdentifier","src":"6452:4:4"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6424:19:4"},"nodeType":"YulFunctionCall","src":"6424:33:4"},"nodeType":"YulExpressionStatement","src":"6424:33:4"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"6359:4:4","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6368:6:4","type":""}],"src":"6334:129:4"},{"body":{"nodeType":"YulBlock","src":"6509:35:4","statements":[{"nodeType":"YulAssignment","src":"6519:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6535:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6529:5:4"},"nodeType":"YulFunctionCall","src":"6529:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6519:6:4"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6502:6:4","type":""}],"src":"6469:75:4"},{"body":{"nodeType":"YulBlock","src":"6632:229:4","statements":[{"body":{"nodeType":"YulBlock","src":"6737:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6739:16:4"},"nodeType":"YulFunctionCall","src":"6739:18:4"},"nodeType":"YulExpressionStatement","src":"6739:18:4"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6709:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"6717:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6706:2:4"},"nodeType":"YulFunctionCall","src":"6706:30:4"},"nodeType":"YulIf","src":"6703:56:4"},{"nodeType":"YulAssignment","src":"6769:25:4","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6781:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"6789:4:4","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6777:3:4"},"nodeType":"YulFunctionCall","src":"6777:17:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6769:4:4"}]},{"nodeType":"YulAssignment","src":"6831:23:4","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6843:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"6849:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6839:3:4"},"nodeType":"YulFunctionCall","src":"6839:15:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6831:4:4"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6616:6:4","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6627:4:4","type":""}],"src":"6550:311:4"},{"body":{"nodeType":"YulBlock","src":"6980:34:4","statements":[{"nodeType":"YulAssignment","src":"6990:18:4","value":{"name":"pos","nodeType":"YulIdentifier","src":"7005:3:4"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6990:11:4"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6952:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"6957:6:4","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6968:11:4","type":""}],"src":"6867:147:4"},{"body":{"nodeType":"YulBlock","src":"7065:51:4","statements":[{"nodeType":"YulAssignment","src":"7075:35:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7104:5:4"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"7086:17:4"},"nodeType":"YulFunctionCall","src":"7086:24:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7075:7:4"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7047:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7057:7:4","type":""}],"src":"7020:96:4"},{"body":{"nodeType":"YulBlock","src":"7175:51:4","statements":[{"nodeType":"YulAssignment","src":"7185:35:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7214:5:4"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"7196:17:4"},"nodeType":"YulFunctionCall","src":"7196:24:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7185:7:4"}]}]},"name":"cleanup_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7157:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7167:7:4","type":""}],"src":"7122:104:4"},{"body":{"nodeType":"YulBlock","src":"7277:32:4","statements":[{"nodeType":"YulAssignment","src":"7287:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"7298:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7287:7:4"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7259:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7269:7:4","type":""}],"src":"7232:77:4"},{"body":{"nodeType":"YulBlock","src":"7359:45:4","statements":[{"nodeType":"YulAssignment","src":"7369:29:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7384:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"7391:6:4","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7380:3:4"},"nodeType":"YulFunctionCall","src":"7380:18:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7369:7:4"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7341:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7351:7:4","type":""}],"src":"7315:89:4"},{"body":{"nodeType":"YulBlock","src":"7455:81:4","statements":[{"nodeType":"YulAssignment","src":"7465:65:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7480:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"7487:42:4","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7476:3:4"},"nodeType":"YulFunctionCall","src":"7476:54:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7465:7:4"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7437:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7447:7:4","type":""}],"src":"7410:126:4"},{"body":{"nodeType":"YulBlock","src":"7587:32:4","statements":[{"nodeType":"YulAssignment","src":"7597:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"7608:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7597:7:4"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7569:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7579:7:4","type":""}],"src":"7542:77:4"},{"body":{"nodeType":"YulBlock","src":"7669:49:4","statements":[{"nodeType":"YulAssignment","src":"7679:33:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7694:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"7701:10:4","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7690:3:4"},"nodeType":"YulFunctionCall","src":"7690:22:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7679:7:4"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7651:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7661:7:4","type":""}],"src":"7625:93:4"},{"body":{"nodeType":"YulBlock","src":"7768:57:4","statements":[{"nodeType":"YulAssignment","src":"7778:41:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7793:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"7800:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7789:3:4"},"nodeType":"YulFunctionCall","src":"7789:30:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7778:7:4"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7750:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7760:7:4","type":""}],"src":"7724:101:4"},{"body":{"nodeType":"YulBlock","src":"7889:52:4","statements":[{"nodeType":"YulAssignment","src":"7899:36:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7929:5:4"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"7912:16:4"},"nodeType":"YulFunctionCall","src":"7912:23:4"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"7899:9:4"}]}]},"name":"convert_t_uint16_to_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7869:5:4","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"7879:9:4","type":""}],"src":"7831:110:4"},{"body":{"nodeType":"YulBlock","src":"7990:238:4","statements":[{"nodeType":"YulVariableDeclaration","src":"8000:58:4","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8022:6:4"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8052:4:4"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8030:21:4"},"nodeType":"YulFunctionCall","src":"8030:27:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8018:3:4"},"nodeType":"YulFunctionCall","src":"8018:40:4"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8004:10:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"8169:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8171:16:4"},"nodeType":"YulFunctionCall","src":"8171:18:4"},"nodeType":"YulExpressionStatement","src":"8171:18:4"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8112:10:4"},{"kind":"number","nodeType":"YulLiteral","src":"8124:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8109:2:4"},"nodeType":"YulFunctionCall","src":"8109:34:4"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8148:10:4"},{"name":"memPtr","nodeType":"YulIdentifier","src":"8160:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8145:2:4"},"nodeType":"YulFunctionCall","src":"8145:22:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8106:2:4"},"nodeType":"YulFunctionCall","src":"8106:62:4"},"nodeType":"YulIf","src":"8103:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8207:2:4","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8211:10:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8200:6:4"},"nodeType":"YulFunctionCall","src":"8200:22:4"},"nodeType":"YulExpressionStatement","src":"8200:22:4"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7976:6:4","type":""},{"name":"size","nodeType":"YulTypedName","src":"7984:4:4","type":""}],"src":"7947:281:4"},{"body":{"nodeType":"YulBlock","src":"8268:142:4","statements":[{"nodeType":"YulAssignment","src":"8278:25:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8301:1:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8283:17:4"},"nodeType":"YulFunctionCall","src":"8283:20:4"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8278:1:4"}]},{"nodeType":"YulAssignment","src":"8312:25:4","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8335:1:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8317:17:4"},"nodeType":"YulFunctionCall","src":"8317:20:4"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8312:1:4"}]},{"body":{"nodeType":"YulBlock","src":"8359:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"8361:16:4"},"nodeType":"YulFunctionCall","src":"8361:18:4"},"nodeType":"YulExpressionStatement","src":"8361:18:4"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8356:1:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8349:6:4"},"nodeType":"YulFunctionCall","src":"8349:9:4"},"nodeType":"YulIf","src":"8346:35:4"},{"nodeType":"YulAssignment","src":"8390:14:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8399:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"8402:1:4"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"8395:3:4"},"nodeType":"YulFunctionCall","src":"8395:9:4"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8390:1:4"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8257:1:4","type":""},{"name":"y","nodeType":"YulTypedName","src":"8260:1:4","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"8266:1:4","type":""}],"src":"8234:176:4"},{"body":{"nodeType":"YulBlock","src":"8444:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8461:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8464:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8454:6:4"},"nodeType":"YulFunctionCall","src":"8454:88:4"},"nodeType":"YulExpressionStatement","src":"8454:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8558:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8561:4:4","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8551:6:4"},"nodeType":"YulFunctionCall","src":"8551:15:4"},"nodeType":"YulExpressionStatement","src":"8551:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8582:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8585:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8575:6:4"},"nodeType":"YulFunctionCall","src":"8575:15:4"},"nodeType":"YulExpressionStatement","src":"8575:15:4"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"8416:180:4"},{"body":{"nodeType":"YulBlock","src":"8630:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8647:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8650:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8640:6:4"},"nodeType":"YulFunctionCall","src":"8640:88:4"},"nodeType":"YulExpressionStatement","src":"8640:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8744:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8747:4:4","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8737:6:4"},"nodeType":"YulFunctionCall","src":"8737:15:4"},"nodeType":"YulExpressionStatement","src":"8737:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8768:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8771:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8761:6:4"},"nodeType":"YulFunctionCall","src":"8761:15:4"},"nodeType":"YulExpressionStatement","src":"8761:15:4"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8602:180:4"},{"body":{"nodeType":"YulBlock","src":"8816:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8833:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8836:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8826:6:4"},"nodeType":"YulFunctionCall","src":"8826:88:4"},"nodeType":"YulExpressionStatement","src":"8826:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8930:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8933:4:4","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8923:6:4"},"nodeType":"YulFunctionCall","src":"8923:15:4"},"nodeType":"YulExpressionStatement","src":"8923:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8954:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8957:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8947:6:4"},"nodeType":"YulFunctionCall","src":"8947:15:4"},"nodeType":"YulExpressionStatement","src":"8947:15:4"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8788:180:4"},{"body":{"nodeType":"YulBlock","src":"9063:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9080:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9083:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9073:6:4"},"nodeType":"YulFunctionCall","src":"9073:12:4"},"nodeType":"YulExpressionStatement","src":"9073:12:4"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"8974:117:4"},{"body":{"nodeType":"YulBlock","src":"9186:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9203:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9206:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9196:6:4"},"nodeType":"YulFunctionCall","src":"9196:12:4"},"nodeType":"YulExpressionStatement","src":"9196:12:4"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"9097:117:4"},{"body":{"nodeType":"YulBlock","src":"9309:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9326:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9329:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9319:6:4"},"nodeType":"YulFunctionCall","src":"9319:12:4"},"nodeType":"YulExpressionStatement","src":"9319:12:4"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"9220:117:4"},{"body":{"nodeType":"YulBlock","src":"9432:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9449:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9452:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9442:6:4"},"nodeType":"YulFunctionCall","src":"9442:12:4"},"nodeType":"YulExpressionStatement","src":"9442:12:4"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"9343:117:4"},{"body":{"nodeType":"YulBlock","src":"9514:54:4","statements":[{"nodeType":"YulAssignment","src":"9524:38:4","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9542:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"9549:2:4","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9538:3:4"},"nodeType":"YulFunctionCall","src":"9538:14:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9558:2:4","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9554:3:4"},"nodeType":"YulFunctionCall","src":"9554:7:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9534:3:4"},"nodeType":"YulFunctionCall","src":"9534:28:4"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9524:6:4"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9497:5:4","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"9507:6:4","type":""}],"src":"9466:102:4"},{"body":{"nodeType":"YulBlock","src":"9680:8:4","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9672:6:4","type":""}],"src":"9574:114:4"},{"body":{"nodeType":"YulBlock","src":"9737:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"9794:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9803:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9806:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9796:6:4"},"nodeType":"YulFunctionCall","src":"9796:12:4"},"nodeType":"YulExpressionStatement","src":"9796:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9760:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9785:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9767:17:4"},"nodeType":"YulFunctionCall","src":"9767:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9757:2:4"},"nodeType":"YulFunctionCall","src":"9757:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9750:6:4"},"nodeType":"YulFunctionCall","src":"9750:43:4"},"nodeType":"YulIf","src":"9747:63:4"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9730:5:4","type":""}],"src":"9694:122:4"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_t_uint16_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, convert_t_uint16_to_t_uint32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint16__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint16_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function convert_t_uint16_to_t_uint32(value) -> converted {\n        converted := cleanup_t_uint16(value)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":4,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":353},{"length":32,"start":437}],"189":[{"length":32,"start":315},{"length":32,"start":545}],"195":[{"length":32,"start":847}],"197":[{"length":32,"start":907}],"199":[{"length":32,"start":940}],"201":[{"length":32,"start":975}]},"linkReferences":{},"object":"6080604052600436106100555760003560e01c806309bc33a71461005a5780631fe543e3146100855780632cfcc539146100ae578063473f1ddc146100b8578063522a1f0b146100e3578063e55ae4e8146100fa575b600080fd5b34801561006657600080fd5b5061006f610137565b60405161007c919061095a565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a7919061079c565b61015f565b005b6100b661021f565b005b3480156100c457600080fd5b506100cd610321565b6040516100da91906108a8565b60405180910390f35b3480156100ef57600080fd5b506100f861034b565b005b34801561010657600080fd5b50610121600480360381019061011c9190610742565b610494565b60405161012e91906108c3565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102089291906108de565b60405180910390fd5b61021b82826104db565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610279576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610410959493929190610907565b602060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610462919061076f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b60008082815481106104a9576104a8610afe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106104f6576104f5610afe565b5b60200260200101516105089190610a9e565b9050600080828154811061051f5761051e610afe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516105b390610893565b60006040518083038185875af1925050503d80600081146105f0576040519150601f19603f3d011682016040523d82523d6000602084013e6105f5565b606091505b5050905080610630576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f81c79c7d3608cee5630ce7c2a8ff40ef0cccc37c2e59104e734691e3e76f59a460405160405180910390a25050505050565b600061068d6106888461099a565b610975565b905080838252602082019050828560208602820111156106b0576106af610b61565b5b60005b858110156106e057816106c68882610718565b8452602084019350602083019250506001810190506106b3565b5050509392505050565b600082601f8301126106ff576106fe610b5c565b5b813561070f84826020860161067a565b91505092915050565b60008135905061072781610b84565b92915050565b60008151905061073c81610b84565b92915050565b60006020828403121561075857610757610b6b565b5b600061076684828501610718565b91505092915050565b60006020828403121561078557610784610b6b565b5b60006107938482850161072d565b91505092915050565b600080604083850312156107b3576107b2610b6b565b5b60006107c185828601610718565b925050602083013567ffffffffffffffff8111156107e2576107e1610b66565b5b6107ee858286016106ea565b9150509250929050565b610801816109e3565b82525050565b610810816109d1565b82525050565b61081f816109f5565b82525050565b60006108326000836109c6565b915061083d82610b81565b600082019050919050565b610851816109ff565b82525050565b61086081610a5b565b82525050565b61086f81610a2d565b82525050565b61087e81610a37565b82525050565b61088d81610a47565b82525050565b600061089e82610825565b9150819050919050565b60006020820190506108bd6000830184610807565b92915050565b60006020820190506108d860008301846107f8565b92915050565b60006040820190506108f36000830185610807565b6109006020830184610807565b9392505050565b600060a08201905061091c6000830188610816565b6109296020830187610884565b6109366040830186610848565b6109436060830185610875565b6109506080830184610857565b9695505050505050565b600060208201905061096f6000830184610866565b92915050565b600061097f610990565b905061098b8282610a6d565b919050565b6000604051905090565b600067ffffffffffffffff8211156109b5576109b4610b2d565b5b602082029050602081019050919050565b600081905092915050565b60006109dc82610a0d565b9050919050565b60006109ee82610a0d565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610a66826109ff565b9050919050565b610a7682610b70565b810181811067ffffffffffffffff82111715610a9557610a94610b2d565b5b80604052505050565b6000610aa982610a2d565b9150610ab483610a2d565b925082610ac457610ac3610acf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b610b8d81610a2d565b8114610b9857600080fd5b5056fea26469706673582212205cadb46d86fede84d55c49670a9bc0e155a635522e4663215bbfe444e9c7763364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x522A1F0B EQ PUSH2 0xE3 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xFA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x137 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x95A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA7 SWAP2 SWAP1 PUSH2 0x79C JUMP JUMPDEST PUSH2 0x15F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB6 PUSH2 0x21F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDA SWAP2 SWAP1 PUSH2 0x8A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH2 0x34B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11C SWAP2 SWAP1 PUSH2 0x742 JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0x8C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x211 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x208 SWAP3 SWAP2 SWAP1 PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21B DUP3 DUP3 PUSH2 0x4DB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x907 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x462 SWAP2 SWAP1 PUSH2 0x76F JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4A9 JUMPI PUSH2 0x4A8 PUSH2 0xAFE JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4F6 JUMPI PUSH2 0x4F5 PUSH2 0xAFE JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH2 0x51E PUSH2 0xAFE JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x5B3 SWAP1 PUSH2 0x893 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x630 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x81C79C7D3608CEE5630CE7C2A8FF40EF0CCCC37C2E59104E734691E3E76F59A4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x68D PUSH2 0x688 DUP5 PUSH2 0x99A JUMP JUMPDEST PUSH2 0x975 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x6B0 JUMPI PUSH2 0x6AF PUSH2 0xB61 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x6E0 JUMPI DUP2 PUSH2 0x6C6 DUP9 DUP3 PUSH2 0x718 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x6B3 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6FF JUMPI PUSH2 0x6FE PUSH2 0xB5C JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x70F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x67A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x727 DUP2 PUSH2 0xB84 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x73C DUP2 PUSH2 0xB84 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x758 JUMPI PUSH2 0x757 PUSH2 0xB6B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x766 DUP5 DUP3 DUP6 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x785 JUMPI PUSH2 0x784 PUSH2 0xB6B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x793 DUP5 DUP3 DUP6 ADD PUSH2 0x72D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7B3 JUMPI PUSH2 0x7B2 PUSH2 0xB6B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x7C1 DUP6 DUP3 DUP7 ADD PUSH2 0x718 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7E2 JUMPI PUSH2 0x7E1 PUSH2 0xB66 JUMP JUMPDEST JUMPDEST PUSH2 0x7EE DUP6 DUP3 DUP7 ADD PUSH2 0x6EA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x801 DUP2 PUSH2 0x9E3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x810 DUP2 PUSH2 0x9D1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x81F DUP2 PUSH2 0x9F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x832 PUSH1 0x0 DUP4 PUSH2 0x9C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x83D DUP3 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x851 DUP2 PUSH2 0x9FF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x860 DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x86F DUP2 PUSH2 0xA2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x87E DUP2 PUSH2 0xA37 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x88D DUP2 PUSH2 0xA47 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP3 PUSH2 0x825 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8BD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x807 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x7F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x8F3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x900 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x807 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x91C PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x816 JUMP JUMPDEST PUSH2 0x929 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x884 JUMP JUMPDEST PUSH2 0x936 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x848 JUMP JUMPDEST PUSH2 0x943 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x875 JUMP JUMPDEST PUSH2 0x950 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x857 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x96F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x866 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97F PUSH2 0x990 JUMP JUMPDEST SWAP1 POP PUSH2 0x98B DUP3 DUP3 PUSH2 0xA6D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9B4 PUSH2 0xB2D JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9DC DUP3 PUSH2 0xA0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EE DUP3 PUSH2 0xA0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA66 DUP3 PUSH2 0x9FF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA76 DUP3 PUSH2 0xB70 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xA95 JUMPI PUSH2 0xA94 PUSH2 0xB2D JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAA9 DUP3 PUSH2 0xA2D JUMP JUMPDEST SWAP2 POP PUSH2 0xAB4 DUP4 PUSH2 0xA2D JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xAC4 JUMPI PUSH2 0xAC3 PUSH2 0xACF JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB8D DUP2 PUSH2 0xA2D JUMP JUMPDEST DUP2 EQ PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xAD 0xB4 PUSH14 0x86FEDE84D55C49670A9BC0E155A6 CALLDATALOAD MSTORE 0x2E CHAINID PUSH4 0x215BBFE4 DIFFICULTY 0xE9 0xC7 PUSH23 0x3364736F6C634300080700330000000000000000000000 ","sourceMap":"657:2790:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3122:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1842:365:3;;;:::i;:::-;;3347:97;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2215:396;;;;;;;;;;;;;:::i;:::-;;3225:114;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3122:95;3169:7;3196:13;3189:20;;3122:95;:::o;6618:256:0:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;1842:365:3:-;1985:13;1973:9;:25;1970:93;;;2022:29;;;;;;;;;;;;;;1970:93;2073:9;2096:10;2073:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2188:10;2176:23;;;;;;;;;;;;1842:365::o;3347:97::-;3395:7;3422:14;;;;;;;;;;;3415:21;;3347:97;:::o;2215:396::-;2341:17;2361:16;:35;;;2411:9;2435:16;1070:1;2502:18;1114:1;2361:194;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2341:214;;2593:9;2571:32;;;;;;;;;;2255:356;2215:396::o;3225:114::-;3280:15;3315:9;3325:5;3315:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3308:23;;3225:114;;;:::o;2619:477::-;2725:19;2764:9;:16;;;;2747:11;2759:1;2747:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;2725:55;;2791:28;2822:9;2832:11;2822:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2791:53;;2872:12;2855:14;;:29;;;;;;;;;;;;;;;;;;2896:12;2914;:17;;2939:21;2914:51;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2895:70;;;2980:7;2976:71;;3011:24;;;;;;;;;;;;;;2976:71;3075:12;3062:26;;;;;;;;;;;;2714:382;;;2619:477;;:::o;24:722:4:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;769:370::-;840:5;889:3;882:4;874:6;870:17;866:27;856:122;;897:79;;:::i;:::-;856:122;1014:6;1001:20;1039:94;1129:3;1121:6;1114:4;1106:6;1102:17;1039:94;:::i;:::-;1030:103;;846:293;769:370;;;;:::o;1145:139::-;1191:5;1229:6;1216:20;1207:29;;1245:33;1272:5;1245:33;:::i;:::-;1145:139;;;;:::o;1290:143::-;1347:5;1378:6;1372:13;1363:22;;1394:33;1421:5;1394:33;:::i;:::-;1290:143;;;;:::o;1439:329::-;1498:6;1547:2;1535:9;1526:7;1522:23;1518:32;1515:119;;;1553:79;;:::i;:::-;1515:119;1673:1;1698:53;1743:7;1734:6;1723:9;1719:22;1698:53;:::i;:::-;1688:63;;1644:117;1439:329;;;;:::o;1774:351::-;1844:6;1893:2;1881:9;1872:7;1868:23;1864:32;1861:119;;;1899:79;;:::i;:::-;1861:119;2019:1;2044:64;2100:7;2091:6;2080:9;2076:22;2044:64;:::i;:::-;2034:74;;1990:128;1774:351;;;;:::o;2131:684::-;2224:6;2232;2281:2;2269:9;2260:7;2256:23;2252:32;2249:119;;;2287:79;;:::i;:::-;2249:119;2407:1;2432:53;2477:7;2468:6;2457:9;2453:22;2432:53;:::i;:::-;2422:63;;2378:117;2562:2;2551:9;2547:18;2534:32;2593:18;2585:6;2582:30;2579:117;;;2615:79;;:::i;:::-;2579:117;2720:78;2790:7;2781:6;2770:9;2766:22;2720:78;:::i;:::-;2710:88;;2505:303;2131:684;;;;;:::o;2821:142::-;2924:32;2950:5;2924:32;:::i;:::-;2919:3;2912:45;2821:142;;:::o;2969:118::-;3056:24;3074:5;3056:24;:::i;:::-;3051:3;3044:37;2969:118;;:::o;3093:::-;3180:24;3198:5;3180:24;:::i;:::-;3175:3;3168:37;3093:118;;:::o;3217:398::-;3376:3;3397:83;3478:1;3473:3;3397:83;:::i;:::-;3390:90;;3489:93;3578:3;3489:93;:::i;:::-;3607:1;3602:3;3598:11;3591:18;;3217:398;;;:::o;3621:115::-;3706:23;3723:5;3706:23;:::i;:::-;3701:3;3694:36;3621:115;;:::o;3742:127::-;3827:35;3856:5;3827:35;:::i;:::-;3822:3;3815:48;3742:127;;:::o;3875:118::-;3962:24;3980:5;3962:24;:::i;:::-;3957:3;3950:37;3875:118;;:::o;3999:115::-;4084:23;4101:5;4084:23;:::i;:::-;4079:3;4072:36;3999:115;;:::o;4120:::-;4205:23;4222:5;4205:23;:::i;:::-;4200:3;4193:36;4120:115;;:::o;4241:379::-;4425:3;4447:147;4590:3;4447:147;:::i;:::-;4440:154;;4611:3;4604:10;;4241:379;;;:::o;4626:222::-;4719:4;4757:2;4746:9;4742:18;4734:26;;4770:71;4838:1;4827:9;4823:17;4814:6;4770:71;:::i;:::-;4626:222;;;;:::o;4854:254::-;4963:4;5001:2;4990:9;4986:18;4978:26;;5014:87;5098:1;5087:9;5083:17;5074:6;5014:87;:::i;:::-;4854:254;;;;:::o;5114:332::-;5235:4;5273:2;5262:9;5258:18;5250:26;;5286:71;5354:1;5343:9;5339:17;5330:6;5286:71;:::i;:::-;5367:72;5435:2;5424:9;5420:18;5411:6;5367:72;:::i;:::-;5114:332;;;;;:::o;5452:648::-;5649:4;5687:3;5676:9;5672:19;5664:27;;5701:71;5769:1;5758:9;5754:17;5745:6;5701:71;:::i;:::-;5782:70;5848:2;5837:9;5833:18;5824:6;5782:70;:::i;:::-;5862;5928:2;5917:9;5913:18;5904:6;5862:70;:::i;:::-;5942;6008:2;5997:9;5993:18;5984:6;5942:70;:::i;:::-;6022:71;6088:3;6077:9;6073:19;6064:6;6022:71;:::i;:::-;5452:648;;;;;;;;:::o;6106:222::-;6199:4;6237:2;6226:9;6222:18;6214:26;;6250:71;6318:1;6307:9;6303:17;6294:6;6250:71;:::i;:::-;6106:222;;;;:::o;6334:129::-;6368:6;6395:20;;:::i;:::-;6385:30;;6424:33;6452:4;6444:6;6424:33;:::i;:::-;6334:129;;;:::o;6469:75::-;6502:6;6535:2;6529:9;6519:19;;6469:75;:::o;6550:311::-;6627:4;6717:18;6709:6;6706:30;6703:56;;;6739:18;;:::i;:::-;6703:56;6789:4;6781:6;6777:17;6769:25;;6849:4;6843;6839:15;6831:23;;6550:311;;;:::o;6867:147::-;6968:11;7005:3;6990:18;;6867:147;;;;:::o;7020:96::-;7057:7;7086:24;7104:5;7086:24;:::i;:::-;7075:35;;7020:96;;;:::o;7122:104::-;7167:7;7196:24;7214:5;7196:24;:::i;:::-;7185:35;;7122:104;;;:::o;7232:77::-;7269:7;7298:5;7287:16;;7232:77;;;:::o;7315:89::-;7351:7;7391:6;7384:5;7380:18;7369:29;;7315:89;;;:::o;7410:126::-;7447:7;7487:42;7480:5;7476:54;7465:65;;7410:126;;;:::o;7542:77::-;7579:7;7608:5;7597:16;;7542:77;;;:::o;7625:93::-;7661:7;7701:10;7694:5;7690:22;7679:33;;7625:93;;;:::o;7724:101::-;7760:7;7800:18;7793:5;7789:30;7778:41;;7724:101;;;:::o;7831:110::-;7879:9;7912:23;7929:5;7912:23;:::i;:::-;7899:36;;7831:110;;;:::o;7947:281::-;8030:27;8052:4;8030:27;:::i;:::-;8022:6;8018:40;8160:6;8148:10;8145:22;8124:18;8112:10;8109:34;8106:62;8103:88;;;8171:18;;:::i;:::-;8103:88;8211:10;8207:2;8200:22;7990:238;7947:281;;:::o;8234:176::-;8266:1;8283:20;8301:1;8283:20;:::i;:::-;8278:25;;8317:20;8335:1;8317:20;:::i;:::-;8312:25;;8356:1;8346:35;;8361:18;;:::i;:::-;8346:35;8402:1;8399;8395:9;8390:14;;8234:176;;;;:::o;8416:180::-;8464:77;8461:1;8454:88;8561:4;8558:1;8551:15;8585:4;8582:1;8575:15;8602:180;8650:77;8647:1;8640:88;8747:4;8744:1;8737:15;8771:4;8768:1;8761:15;8788:180;8836:77;8833:1;8826:88;8933:4;8930:1;8923:15;8957:4;8954:1;8947:15;8974:117;9083:1;9080;9073:12;9097:117;9206:1;9203;9196:12;9220:117;9329:1;9326;9319:12;9343:117;9452:1;9449;9442:12;9466:102;9507:6;9558:2;9554:7;9549:2;9542:5;9538:14;9534:28;9524:38;;9466:102;;;:::o;9574:114::-;;:::o;9694:122::-;9767:24;9785:5;9767:24;:::i;:::-;9760:5;9757:35;9747:63;;9806:1;9803;9796:12;9747:63;9694:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"605000","executionCost":"infinite","totalCost":"infinite"},"external":{"enterRaffle()":"infinite","getEntranceFee()":"infinite","getPlayer(uint256)":"5055","getRecentWinner()":"2566","rawFulfillRandomWords(uint256,uint256[])":"infinite","requestRandomWinner()":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"enterRaffle()":"2cfcc539","getEntranceFee()":"09bc33a7","getPlayer(uint256)":"e55ae4e8","getRecentWinner()":"473f1ddc","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","requestRandomWinner()":"522a1f0b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughETHEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__SendMoreToEnterRaffle();\\r\\nerror Raffle__RaffleNotOpen();\\r\\n\\r\\n// Raffle\\r\\n// Enter the lottery by sending ETH to the contract address.\\r\\n// Pick a random winner (verifiably random)\\r\\n// Winner to be selected every X minutes\\r\\n// Chainlink Oracle --> Randomness and Automated execution\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2 {\\r\\n\\r\\n    // State variables\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gaslane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint16 private constant NUM_WORDS = 1;\\r\\n\\r\\n    //Lottery variables\\r\\n    address private s_recentWinner;\\r\\n\\r\\n    //Events\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicker(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2, \\r\\n        uint256 entranceFee, \\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit\\r\\n        ) \\r\\n        VRFConsumerBaseV2(vrfCoordinatorV2){\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gaslane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n    }\\r\\n    \\r\\n    function enterRaffle() public payable{\\r\\n        // require(msg.value > i_entranceFee, \\\"Incorrect amount of ETH sent\\\");\\r\\n        if(msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotEnoughETHEntered();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        // Emit and event when we update the state\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function requestRandomWinner() external {\\r\\n        //Request the random number; once we get it, do something with it\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gaslane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\r\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[winnerIndex];\\r\\n        s_recentWinner = recentWinner;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if(!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicker(recentWinner);\\r\\n    }\\r\\n\\r\\n    // Getters\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address payable) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4903fbbc5ee8342d7e15f912316ad294ebdc693b688aed8cd5fd0aed9a1045d9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":192,"contract":"contracts/Raffle.sol:Raffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":209,"contract":"contracts/Raffle.sol:Raffle","label":"s_recentWinner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}